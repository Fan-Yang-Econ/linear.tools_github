all_raw_values = list()
for ( each_raw_var in all_raw_var) {
x = data[,each_raw_var]
Class = paste( class(x),collapse=' ')
if ( Class %in% c("numeric","integer")){
all_raw_values[[each_raw_var]] = mean(x)
} else {
# for factor or character, we assume Mode
all_raw_values[[each_raw_var]] = Mode(x)
}
}
# if you provide the values to the non-focus vars, then replace the mean/mode by the provided ones.
if (length(nonfocus_value)){
for( x in names(nonfocus_value)){
all_raw_values[[x]] = nonfocus_value[[x]]
}
}
### get the valueS for focus raw vars
# if numeric:
# get seq(0.015,0.95,0.3 ) quantile values for the non-key focus vars
# get seq(0.015,0.95,0.05 ) quantile values for the key focus vars
# if not : like factor
# get the unique values
is_factor_key  = c(1,1)
names(is_factor_key) = focus_var_raw
i=1
for( x in focus_var_raw){
# x = focus_var_raw[1]
# to see whether focus_vars are factors/characters
is_factor_key[x] = sum(c("factor","character") %in% class(all_raw_values[[x]] ))
if (x %in% names(focus_value)) {
# if values are provided for focus variables
all_raw_values[[x]] = focus_value[[x]]
} else if ( # if not provided, and x is a factor/category
is_factor_key[x]
){
# for factors and characters, just get unique values
all_raw_values[[x]] =  focus_value[[x]] = unique(data[,x])
} else if ( i== 2 & is_factor_key[1]) { # for numerics
# if the first focus var is a factor/character, and second focus var is a numeric,
# then we just don't need a very detailed quantile for the second one
# i = 2
all_raw_values[[x]] =  focus_value[[x]] =   unique(quantile(data[,x],seq(0.015,0.95,0.3 )))
} else {
all_raw_values[[x]] =  focus_value[[x]] =   unique(quantile(data[,x],seq(0.015,0.95,0.05 )))
}
i = i + 1
}
# ________ prepare data for predict() _____________
# this will keep the class
modeled_data = expand_grid(all_raw_values,stringsAsFactors = FALSE)
# modeled_data[,1] %>% class
model_use = model
corresponding_coeff = x_pair[x_pair$raw %in% focus_var_raw[1],"coeff"] %>% unique
# if you only focus the effects of certain coeff vars,
# then assign all other focus_raw related coeff vars to 0
if (!is.null(focus_var_coeff)){
corresponding_coeff = focus_var_coeff
coeff_to_delete = all_focus_coeff[!all_focus_coeff %in% focus_var_coeff]
coeff_to_include = all_coeff[!all_coeff %in% coeff_to_delete]
model_use = focusing_var_coeff(model,coeff_to_include)
}
# if you only focus the effects of certain coeff vars,
# then assign all other focus_raw related coeff vars to 0
if (!is.null(focus_var_model)){
corresponding_coeff = x_pair[x_pair$model %in% focus_var_model,"coeff"] %>% unique
sanity_check(focus_var_model,exact_in_match = focus_var_model)
model_to_delete = all_focus_model[!all_focus_model %in% focus_var_model]
coeff_to_delete = x_pair[x_pair$model %in% model_to_delete,"coeff"] %>% unique
coeff_to_include = x_pair[!x_pair$coeff %in% coeff_to_delete,"coeff"] %>% unique
model_use = focusing_var_coeff(model_use,focus_var_coeff = coeff_to_include)
}
if (!is.null(focus_var_coeff) && !is.null(focus_var_model)){
corresponding_coeff = x_pair[x_pair$model %in% focus_var_model,"coeff"] %>% unique
if (length(union(corresponding_coeff,focus_var_coeff)) == 0) stop("focus_var_coeff and focus_var_model have no common variables.")
}
# ------------------- Prediction ~~~~~~~~~~~~~~~~~~~~~~~~```
# if formula is dirty, then the predict will now work
if (
sum(
(get_x_hidden(model_use) %in% colnames(modeled_data))==0
)
){
model_use = glm(paste_formula(model_use,clean = TRUE) %>% as.formula, data = data, family = family(model_use))
}
predicted =  data.frame(predict = predict(model_use,newdata = modeled_data,type='response'),
modeled_data,
stringsAsFactors = FALSE)
###_____  check the monotonicity ________
# when there is only one focus var: the key
if (length(focus_var_raw) ==1 ) {
predicted = predicted[order(predicted[,focus_var_raw[1]]),]
monoton_increase = is_increase(predicted$predict)
monoton_decrease = is_decrease(predicted$predict)
}
# when there are focus vars: the key and non-key, we check the monotonic effect under each value of the non-key
if (length(focus_var_raw) ==2 ) {
predicted = predicted[order(focus_var_raw[2],focus_var_raw[1]),]
unique_key_focus = unique(predicted[,focus_var_raw[2]])
monoton_increase = laply(unique_key_focus, function(x){
is_increase(predicted[predicted[,focus_var_raw[2]] ==x, ]$predict)
})
monoton_decrease = laply(unique_key_focus, function(x){
is_decrease(predicted[predicted[,focus_var_raw[2]] ==x, ]$predict)
})
names(monoton_decrease) = unique_key_focus
names(monoton_increase) = unique_key_focus
}
# ------------------- For Plot ~~~~~~~~~~~~~~~~~~~~~~~~```
plot_data = predicted
# whether the target variable needs some transform function?
if (!is.null(transform_y)){
plot_data$predict =  predicted$predict = transform_y(plot_data$predict)
}
# initialize the graph
graph = NULL
# if the key focus var only has at most 10 unique values, then transfer it to factor when plot
if (PRINT & PLOT){
x_title = paste(corresponding_coeff,collapse = '+')
graph_title = paste('marginal impacts of ', focus_var_raw[1], ' on ', y, sep='')
Length_Unique = plot_data[,focus_var_raw[1]] %>% unique %>% length
# if bar_plot is not provided
if (is.null(bar_plot)){
if  ("numeric" %in% class(plot_data[,focus_var_raw[1]])){
bar_plot = FALSE
} else {
bar_plot = TRUE
}
}
# if bar_plot is TRUE and suitable, then transform the key var into factor
if (bar_plot) {
plot_data[,focus_var_raw[1]] = as.factor(plot_data[,focus_var_raw[1]])
is_factor_key[1] = 1
}
# plot according to number of focus variables
if (length(focus_var_raw) ==1 ) {
if (bar_plot && is_factor_key[1]>0){
# if it is a character, then use bar to plot
graph =
ggplot(plot_data) + geom_bar(aes_string(x=focus_var_raw[1], y = 'predict'),stat = "identity")
} else {
graph =
ggplot(plot_data) + geom_line(aes_string(x=focus_var_raw[1], y = 'predict'))
}
}
#
if (length(focus_var_raw)==2) {
Class_col = paste( class(plot_data[,focus_var_raw[2]]),collapse=' ')
if (!is_factor_key[2]) { # transfer the secondary key into factor
plot_data[,focus_var_raw[2]] = as.factor(plot_data[,focus_var_raw[2]])
}
if (bar_plot && is_factor_key[1] ){
graph = ggplot(plot_data) + geom_bar(aes_string(x=focus_var_raw[1],
fill = focus_var_raw[2],
y = 'predict'),
stat = "identity")
} else {
graph = ggplot(plot_data) +
geom_line(aes_string(x=focus_var_raw[1], colour = focus_var_raw[2], y = 'predict'))
}
}
# if logit or probit, then y shall be percentage
if (
!("lm" %in% class(model)) &&
model$family$link %in% c("logit","probit")
) {
graph = graph + scale_y_continuous(labels = percent)
}
graph = graph + labs(y=y, x = x_title, title = graph_title)
if (Reverse && is_factor_key[1] == 0) {graph = graph + scale_x_reverse() # factor cannot use reverse
print(graph)
}
}
Coeff_table = data.frame(Var = names(model_use$coefficients) ,
coeff_value = model_use$coefficients,
stringsAsFactors = FALSE)
rownames(Coeff_table) = NULL
return(list(
Focus_values = focus_value,
data_and_predict = predicted,
summmary_glm = Coeff_table,
Monoton_Increase = monoton_increase,
Monoton_Decrease = monoton_decrease  ))
if (FALSE && TRUE) {
##___ unit test ____
# __________________  One Dimension: the most basic case ____________________
data_used = ggplot2::diamonds
diamond_lm3 = lm(price~ cut + carat + I(carat^2) +
I(carat^3) + I(carat  * depth) + cut:depth, data_used) # a GLM
# more carats, higher price.
effect(model = diamond_lm3,
data = ggplot2::diamonds,
focus_var_raw = c('carat'),
Reverse = TRUE) # value in x-axis is reverse
# Deal with dirty formulas
diamond_lm_dirty = lm(price~ cut + carat- cut, data_used) # a GLM
# more carats, higher price.
effect(model = diamond_lm_dirty,
data = ggplot2::diamonds,
focus_var_raw = c('carat'),
Reverse = TRUE) # value in x-axis is reverse
# focus on only 'I(carat^3)', which means we will make all other coeff,
# including 'carat' and 'I(carat^2)' into 0
effect(model = diamond_lm3,
data = ggplot2::diamonds,
focus_var_raw =c('carat'),
focus_var_coeff = 'I(carat^3)')
# __________________  One Dimension: Categorical ____________________
# selected model-var to focus: here not focus on cut:depth, only focus on cut
effect(model = diamond_lm3,
data = ggplot2::diamonds,
focus_var_raw = c('cut'),
focus_var_model = 'cut')
# selected model-var to focus: here not focus on cut:depth, only focus on cut
effect(model = diamond_lm3,
data = ggplot2::diamonds,
focus_var_raw = c('cut'),
focus_var_model = 'cut:depth')
# __________________  Double Dimensions ____________________
# here focus_var_raw has two values: "carat" and "cut"
# that means we will evaluate impact of "carat" on "price" through different value of "cut"
effect(model = diamond_lm3,data = ggplot2::diamonds, focus_var_raw=c('carat',"cut"))
# other examples
effect(model = diamond_lm3,data = ggplot2::diamonds, focus_var_raw=c('carat',"depth"))
effect(model = diamond_lm3,data = ggplot2::diamonds, focus_var_raw=c("cut","carat"))
# __________________  Provide Values to Focused vars  ____________________
# when evaluating impacts,
# we can provide the range of values for key variables
effect(model = diamond_lm3,data = ggplot2::diamonds,
focus_var_raw = c('carat',"cut"),
focus_value = list(carat=seq(0.5,6,0.1)))
effect(model = diamond_lm3,data = ggplot2::diamonds,
focus_var_raw = c('carat',"cut"),
focus_value = list(carat=seq(0.5,6,0.1)))
effect(model = diamond_lm3,data = ggplot2::diamonds,
focus_var_raw=c('carat',"cut"),
focus_value = list(carat=seq(0.5,6,0.1),
cut = c('Ideal','Premium')
))
# __________________  Provide Values to Non-focus vars  ____________________
effect(model = diamond_lm3,data = ggplot2::diamonds,
focus_var_raw=c('carat',"cut"),
nonfocus_value = list(depth = 75) # Provide Values to Non-focus vars
)
# if non-key value not provided, the non-key value would be mean or mode,
# in this case: depth's mean is 61.7494
effect(model = diamond_lm3,data = ggplot2::diamonds,
focus_var_raw=c('carat',"cut"))
# __________________  Provide Wrong Names  ____________________
effect(model = diamond_lm3,data = ggplot2::diamonds,
focus_var_raw=c('carat','WRONGNAME'), # Provide Values to Non-focus vars
nonfocus_value = list(depth = 75)
)
effect(model = diamond_lm3,data = ggplot2::diamonds,
focus_var_raw=c('carat',"cut"),
focus_value = list(WRONGNAME=seq(0.5,6,0.1),
WRONGNAME2 = c('Ideal','Premium')
))
}
}
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(linear.tools)
roxygen2::roxygenise()
library(linear.tools)
build()
devtools::biuld()
devtools:biuld()
devtools:::biuld()
devtools:::build
devtools:::build()
version
install.packages("~/Dropbox/Tech/R/linear.tools_1.2.0.tar.gz", repos = NULL, type = "source")
devtools:::check()
install.packages("~/Dropbox/Tech/R/linear.tools_1.2.0.tar.gz", repos = NULL, type = "source")
install.packages("~/Dropbox/Tech/R/linear.tools_1.2.0.tar.gz", repos = NULL, type = "source")
install.packages(c("BH", "DBI", "nlme", "quantreg", "Rcpp", "survival", "zoo"))
install.packages("CommonTrend")
install.packages("linear.tools")
# generate data
generate_func = function(n=1000,size=0.5){
# n: how many data points
# size: hold 50% of all data as train
set.seed(1)
x = seq(0,2*pi,length=n) # generate x
noise = rnorm(n,0,0.3)
y = sin(x) + noise # generate y
select_index = sample(1:n,size=size*n,replace = F)
# split data into train and test
train_x = x[select_index]
train_y = y[select_index]
test_x = x[-select_index]
test_y = y[-select_index]
data = list('train_x'=train_x,
'train_y'=train_y,
'test_x'=test_x,
'test_y'=test_y)
return(data)
}
data = generate_func()
objects(data)
data
?rpart
??rpart
install.packages(gbm)
install.packages('gbm')
library('gbm')
head(data)
??rpart
progstat <- factor(stagec$pgstat, levels = 0:1, labels = c("No", "Prog"))
library(rpart)
progstat <- factor(stagec$pgstat, levels = 0:1, labels = c("No", "Prog"))
cfit <- rpart(progstat ~ age + eet + g2 + grade + gleason + ploidy,
data = stagec, method = 'class')
cfit
plot(cfit)
text(cfit)
progstat
stagec
rpart
.Call
?.Call
plot(cfit)
text(cfit)
progstat
progstat[rade<2.5]
progstat[grade<2.5]
progstat[stagec$grade<2.5]
gini_impurity = function(x){
length_x = length(x)
impurity = 0
for (i in unique(x)){
p = sum(i %in% x)/length_x
impurity = p * (1-p) + impurity
}
impurity
}
progstat[stagec$grade<2.5]
gini_impurity(progstat[stagec$grade<2.5])
gini_impurity(progstat[stagec$grade<2.5]) + gini_impurity(progstat[stagec$grade>=2.5])
delta_impurity = function(y, condition, P_parant = 1, function_impurity = gini_impurity){
P_parant *
(function_impurity(condition) -
(function_impurity(condition) * sum(condition)+ function_impurity(!condition)) * sum(!condition)
)
}
delta_impurity(progstat, stagec$grade<2.5)
delta_impurity = function(y, condition, P_parant = 1, function_impurity = gini_impurity){
P_parant /length(condition) *
(function_impurity(condition) -
(function_impurity(condition) * sum(condition)+ function_impurity(!condition)) * sum(!condition)
)
}
delta_impurity(progstat, stagec$grade<2.5)
delta_impurity(progstat, stagec$grade<2.1)
delta_impurity(progstat, stagec$grade<2)
delta_impurity(progstat, stagec$grade<2.3)
delta_impurity(progstat, stagec$grade<3)
delta_impurity(progstat, stagec$grade<10)
for (i in seq(0,5,0.1){
delta_impurity(progstat, stagec$grade<i)
}
for (i in seq(0,5,0.1)){
delta_impurity(progstat, stagec$grade<i)
}
for (i in seq(0,5,0.1)){
delta_impurity(progstat, stagec$grade<i) %>% print
}
source("S:/Users/Fan Yang/Research/Core_Code/attach_Load_First.R")
source("/Users/yangguodaxia/Dropbox/Tech/R/attach_Load_First.R")
for (i in seq(0,5,0.1)){
delta_impurity(progstat, stagec$grade<i) %>% print
}
for (i in seq(0,5,0.1)){
data.frame(i, delta_impurity(progstat, stagec$grade<i)) %>% print
}
for (i in seq(0,5,0.1)){
c(i,delta_impurity(progstat, stagec$grade<i) %>% print
}
for (i in seq(0,5,0.1)){
c(i,delta_impurity(progstat, stagec$grade<i)) %>% print
}
stagec$grade
for (i in seq(1,5)){
c(i,delta_impurity(progstat, stagec$grade<i)) %>% print
}
a_impurity = function(y, condition, P_parant = 1, function_impurity = gini_impurity){
P_parant /length(condition) *
(function_impurity(y) -
(function_impurity(y[condition]) * sum(condition) +
function_impurity(y[!condition])) * sum(!condition)
)
}
for (i in seq(1,5)){
c(i,delta_impurity(progstat, stagec$grade<i)) %>% print
}
function_impurity(progstat[stagec$grade<1]))
function_impurity(progstat[stagec$grade<1])
gini_impurity(progstat[stagec$grade<1]) * sum(!condition)
gini_impurity(progstat[stagec$grade<1])
gini_impurity(progstat[stagec$grade>=1])
gini_impurity(progstat)
delta_impurity = function(y, condition, P_parant = 1, function_impurity = gini_impurity){
length_condition = length(condition)
P_parant *
(function_impurity(y) -
(function_impurity(y[condition]) * sum(condition) / length_condition +
function_impurity(y[!condition])) * sum(!condition) / length_condition
)
}
for (i in seq(1,5)){
c(i,delta_impurity(progstat, stagec$grade<i)) %>% print
}
gini_impurity(progstat[stagec$grade<1])
gini_impurity(progstat[stagec$grade>=1])
gini_impurity(progstat)
gini_impurity(progstat[stagec$grade>=1])
progstat[stagec$grade>=1]
delta_impurity(progstat, stagec$grade<1)
eval_arguments( delta_impurity(progstat, stagec$grade<1) )
length_condition = length(condition)
function_impurity(y[!condition])) * sum(!condition) / length_condition
delta_impurity = function(y, condition, P_parant = 1, function_impurity = gini_impurity){
length_condition = length(condition)
P_parant *
(function_impurity(y) -
(function_impurity(y[condition]) * sum(condition) / length_condition +
function_impurity(y[!condition]) * sum(!condition) / length_condition
)
)
}
for (i in seq(1,5)){
c(i,delta_impurity(progstat, stagec$grade<i)) %>% print
}
eval_arguments( delta_impurity(progstat, stagec$grade<2.5) )
delta_impurity(progstat, stagec$grade<2.5)
for (i in seq(1,5,0.5)){
c(i,delta_impurity(progstat, stagec$grade<i)) %>% print
}
stagec$g2
progstat[stagec$grade<2.5]
delta_impurity = function(y, condition, P_parant = 1, function_impurity = gini_impurity){
y = y[!is.na(condition)]
condition = condition[!is.na(condition)]
length_condition = length(condition)
P_parant *
(function_impurity(y) -
(function_impurity(y[condition]) * sum(condition) / length_condition +
function_impurity(y[!condition]) * sum(!condition) / length_condition
)
)
}
for (i in seq(0,20,0.5)){
c(i,delta_impurity(progstat[stagec$grade>2.5], stagec$g2<i)) %>% print
}
roxygen2::roxygenise()
roxygen2::roxygenise()
library(linear.tools)
library(linear.tools)
library(linear.tools)
library(linear.tools)
data_used = ggplot2::diamonds
diamond_lm3 = lm(price~ cut + carat + I(carat^2) +
I(carat^3) + I(carat  * depth) + cut:depth, data_used) # a GLM
effect(model = diamond_lm3,
data = ggplot2::diamonds,
focus_var_raw = c('cut'),
focus_var_model = 'cut')
tryCatch(
effect(model = diamond_lm3,
data = ggplot2::diamonds,
focus_var_raw = c('cut'),
focus_var_model = 'cut'),
warning = function(war){
print(war)
}
)# NOT PASS
tryCatch(
effect(model = diamond_lm3,
data = ggplot2::diamonds,
focus_var_raw = c('cut'),
focus_var_model = 'cut'),
warning = function(war){
print(war)
}
)# NOT PASS
effect(model = diamond_lm3,
data = ggplot2::diamonds,
focus_var_raw = c('cut'),
focus_var_model = 'cut'
)
tryCatch(
effect(model = diamond_lm3,
data = ggplot2::diamonds,
focus_var_raw = c('cut'),
focus_var_model = 'cut'
),
warning = function(war){
print(war)
}
)# NOT PASS
suppressWarnings(
effect(model = diamond_lm3,
data = ggplot2::diamonds,
focus_var_raw = c('cut'),
focus_var_model = 'cut'
)
)
library(linear.tools)
library(linear.tools)
library(linear.tools)
